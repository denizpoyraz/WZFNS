#ifndef ReadInpinutFile_h
#define ReadInpinutFile_h

#include <iostream>
#include <cstdlib>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>
#include <map>

#include "TString.h"
#include "TH1F.h"

using namespace std;

// sample container class                                                                                                                                             
class sampleContainer {
 public :
  sampleContainer(){};
  ~sampleContainer(){};

 sampleContainer(string sampleName, int color, double xsec, int numBefore, int isSignal):
  sampleName(sampleName),
    color(color),
    xsec(xsec),
    numBefore(numBefore),
    isSignal(isSignal){};

  string sampleName ;
  int    color;
  double xsec;
  int numBefore;
  int isSignal;

};

class cutContainer {

 public :
  cutContainer(){};
  ~cutContainer(){};

 cutContainer(string cutLayerName, 
			int     nLep, 
			double  SFOS, 
			int     nextra,                      
			double  flavour,
			double ptL1, 
			double ptL2, 
			double ptL3, 
			double etaL, 
			double MZcut,
			double MLLcut,
			double  MET, 
			double nJet,
			double ptJet1, 
			double ptJet2, 
			double etaJet, 
			double DetaJJ, 
			double Mjj, 
			double DetaLL, 
			//double bTagVeto, 
			//double jetPUID,
			int polarization = 99):
    cutLayerName(cutLayerName),
			nLep(nLep),
			SFOS(SFOS),
			nextra(nextra),
			flavour(flavour),
			ptL1(ptL1),
			ptL2(ptL2),
			ptL3(ptL3),
			etaL(etaL),
			MZcut(MZcut),
			MLLcut(MLLcut),
			MET(MET),
			nJet(nJet),
			ptJet1(ptJet1),
			ptJet2(ptJet2),
			etaJet(etaJet),
			DetaJJ(DetaJJ),
			Mjj(Mjj),
			DetaLL(DetaLL),
			//bTagVeto(bTagVeto),
			//jetPUID(jetPUID),
			polarization(polarization){};
  string cutLayerName ;
			int     nLep; 
			double  SFOS; 
			int     nextra;                      
			double  flavour;
			double ptL1; 
			double ptL2; 
			double ptL3; 
			double etaL; 
			double MZcut;
			double MLLcut;
			double  MET; 
			double nJet;
			double ptJet1, 
			double ptJet2, 
			double etaJet; 
			double DetaJJ; 
			double Mjj; 
			double DetaLL; 
			//double bTagVeto; 
			//double jetPUID;
 			int  polarization;

};

class variableContainer {

 public :

  variableContainer(){};
  ~variableContainer(){};

 variableContainer(string variableName, int Nbin, double min, double max, string label):
  variableName(variableName),
    Nbin(Nbin),
    min(min),
    max(max),
    label(label){}; 

  string variableName ;
  int Nbin ;
  double min;
  double max;
  string label;

};

class trainingContainer {

 public: 

  trainingContainer(){};
  ~trainingContainer(){};

 trainingContainer(string fileName, string varNameReduced, pair<int,int> puBin, vector<string> methodName):
  fileName(fileName),
    varNameReduced(varNameReduced),
    puBin(puBin),
    methodName(methodName)
  {};

  string fileName;
  string varNameReduced;
  pair<int,int> puBin;
  vector<string> methodName;

};

// class in order to make plots                                                                                                                                               

class histoContainer {

 public :

  histoContainer(){};

  ~histoContainer(){};

 histoContainer(string cutName, variableContainer container):
  cutName(cutName),
    varName(container.variableName){
    histogram = new TH1F((cutName+"_"+varName).c_str(),"",container.Nbin,container.min,container.max);
    histogram->GetXaxis()->SetTitle(container.label.c_str());
    histogram->StatOverflows(1);
    histogram->Sumw2();
  }

  bool operator == (const histoContainer & plot2) const {
    if(plot2.cutName == cutName and plot2.varName == varName ) return true;
    else return false;
  }

  bool findCutByLabel ( const string & cutString){
    TString name = Form("%s",cutName.c_str());
    if(name.Contains(cutString.c_str())) return true;
    else return false;

  }

  string cutName;
  string varName;
  TH1F* histogram;

};

int ReadInputSampleFile   (const string & , map<string, vector<sampleContainer> > & );

int ReadInputVariableFile (const string & , vector<variableContainer> & );

int ReadInputVariableFile (const string & , vector<string> & );

int ReadInputTrainingFile (const string & , vector<trainingContainer> & );

int ReadInputCutFile      (const string & , vector<cutContainer> &);

#endif
